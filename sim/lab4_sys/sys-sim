#!/usr/bin/env python
#=========================================================================
# sys-sim [options] <elf-binary>
#=========================================================================
# This is the simulator for both the functional-level and RTL models of a
# single core and multicore system.
#
#  -h --help           Display this message
#
#  --impl              {fl,score}
#  --trace             Display line tracing
#  --trace-regs        Show regs read/written by each inst
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to sys-<impl>-<elf-binary>.vcd
#  --max-cycles        Set timeout num_cycles, default=100000
#
#  <elf-binary>        TinyRV2 elf binary file
#
# Author : Shunning Jiang, Christopher Batten
# Date   : Oct 2, 2016

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from pymtl3 import *

from pymtl3.stdlib.stream.ifcs  import OStreamIfc
from pymtl3.stdlib.stream       import StreamSourceFL
from pymtl3.stdlib.mem          import MemoryFL, mk_mem_msg, MemMsgType
from pymtl3.stdlib.proc         import SparseMemoryImage, elf_reader
from pymtl3.stdlib.test_utils   import config_model_with_cmdline_opts

from lab2_proc.tinyrv2_encoding import assemble

from lab4_sys.SingleCoreSysFL   import SingleCoreSysFL
# from lab4_sys.SingleCoreSys     import SingleCoreSys

#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",               action="store_true"    )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl",  default="fl", choices=["fl","score"] )
  p.add_argument( "--trace",                action="store_true" )
  p.add_argument( "--trace-regs",           action="store_true" )
  p.add_argument( "--stats",                action="store_true" )
  p.add_argument( "--dump-vcd",             action="store_true" )
  p.add_argument( "--max-cycles", default=100000, type=int       )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#=========================================================================
# TestHarness
#=========================================================================

class TestHarness( Component ):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def construct( s, Sys ):

    # Interface

    s.stats_en    = OutPort()
    s.commit_inst = OutPort()
    s.proc2mngr   = OStreamIfc( Bits32 )

    # Instantiate source, processor, and memory

    s.src = StreamSourceFL( Bits32, [] )
    s.sys = Sys()
    s.mem = MemoryFL(2, mem_ifc_dtypes=[mk_mem_msg(8,32,128),mk_mem_msg(8,32,128)] )

    # Processor <-> Proc/Mngr

    # Note simulator only gets output, so we don't need to worry about
    # the mngr2proc interface. We just hook it up to an empty stream
    # source.

    s.src.ostream //= s.sys.mngr2proc

    # The simulator will monitor the proc2mngr interface at the top level
    # for handling various message types.

    s.proc2mngr //= s.sys.proc2mngr

    # Processor <-> Memory

    s.sys.imem //= s.mem.ifc[0]
    s.sys.dmem //= s.mem.ifc[1]

    # Bring the stats enable up to the top level

    s.stats_en    //= s.sys.stats_en
    s.commit_inst //= s.sys.commit_inst

  #-----------------------------------------------------------------------
  # load memory image
  #-----------------------------------------------------------------------

  def load( self, mem_image ):
    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # cleanup
  #-----------------------------------------------------------------------

  def cleanup( s ):
    del s.mem.mem[:]

  #-----------------------------------------------------------------------
  # line trace
  #-----------------------------------------------------------------------

  def line_trace( s ):

    imem_reqstr = "  "
    if s.mem.ifc[0].reqstream.val and s.mem.ifc[0].reqstream.rdy:
      imem_reqstr = MemMsgType.str[int(s.mem.ifc[0].reqstream.msg.type_)]

    imem_respstr = "  "
    if s.mem.ifc[0].respstream.val and s.mem.ifc[0].respstream.rdy:
      imem_respstr = MemMsgType.str[int(s.mem.ifc[0].respstream.msg.type_)]

    imem_str = "     "
    if imem_reqstr != "  " or imem_respstr != "  ":
      imem_str = f"{imem_reqstr}>{imem_respstr}"

    dmem_reqstr = "  "
    if s.mem.ifc[1].reqstream.val and s.mem.ifc[1].reqstream.rdy:
      dmem_reqstr = MemMsgType.str[int(s.mem.ifc[1].reqstream.msg.type_)]

    dmem_respstr = "  "
    if s.mem.ifc[1].respstream.val and s.mem.ifc[1].respstream.rdy:
      dmem_respstr = MemMsgType.str[int(s.mem.ifc[1].respstream.msg.type_)]

    dmem_str = "     "
    if dmem_reqstr != "  " or dmem_respstr != "  ":
      dmem_str = f"{dmem_reqstr}>{dmem_respstr}"

    mem_str = f"{imem_str}|{dmem_str}"

    return ("*" if s.sys.stats_en else " ") + \
           s.sys.line_trace() + " " + \
           mem_str

#=========================================================================
# Main
#=========================================================================

def main():

  opts = parse_cmdline()

  # Determine which model to use in the simulator

  model_impl_dict = {
    "fl"    : SingleCoreSysFL,
    # "score" : SingleCoreSys,
  }

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf_reader( file_obj )

  # Create test harness

  th = TestHarness( model_impl_dict[opts.impl] )

  # Create VCD filename

  unique_name = ""
  if opts.dump_vcd:
    elf_file_basename = os.path.basename( opts.elf_file )
    unique_name = f"sys-sim-score-{elf_file_basename}.vcd"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
  }

  # Trace registers

  if opts.trace_regs:
    th.set_param( "top.proc.construct", trace_regs=True )

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['sys'] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Load the program into the model

  th.load( mem_image )

  # Stats

  num_cycles = 0
  num_insts  = 0

  # Storage for extra three messages on failure

  app_fail_xtra       = False
  app_fail_xtra_count = 0
  app_fail_xtra_msgs  = [ None, None, None ]

  commit_inst = [0]*4

  # Storage for print

  app_print           = False
  app_print_type      = None  # 0: int, 1: char, 2: string

  # Reset test harness

  if opts.trace:
    print()
  th.sim_reset()

  # We are always ready to accept a proc2mngr message

  th.proc2mngr.rdy @= 1

  # Run the simulation

  num_insts = 0
  while th.sim_cycle_count() < opts.max_cycles:

    # Update cycle count

    if th.stats_en:
      num_cycles += 1

      if th.commit_inst:
        num_insts += 1

    # Check the proc2mngr interface

    if th.proc2mngr.val:

      msg_type = th.proc2mngr.msg[16:32]
      msg_xtra = th.proc2mngr.msg[ 0:16]

      # First we check if we are gathering app_fail_xtra_msgs

      if app_fail_xtra:
        app_fail_xtra_msgs[ app_fail_xtra_count ] = th.proc2mngr.msg[:]
        app_fail_xtra_count += 1
        if app_fail_xtra_count == 3:
          if opts.trace:
            th.print_line_trace()
          print( "" )
          print( "  [ FAILED ] dest[{0}] != ref[{0}] ({1} != {2})" \
                  .format( int(app_fail_xtra_msgs[0]),
                           int(app_fail_xtra_msgs[1]),
                           int(app_fail_xtra_msgs[2]) ) )
          print( "" )
          exit(1)

      # Then we check if we are doing a print

      elif app_print:

        # Print int

        if app_print_type == 0:
          print( th.proc2mngr.msg[:].uint(), end='' )
          app_print = False

        if app_print_type == 1:
          print( chr(th.proc2mngr.msg[:].uint()), end='' )
          app_print = False

        if app_print_type == 2:
          char_as_num = th.proc2mngr.msg[:].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end='' )
          else:
            app_print = False

      # Message is from an assembly test

      elif msg_type == 0:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          if opts.trace:
            th.print_line_trace()
          print( "" )
          print( f"  [ FAILED ] error on line {msg_xtra.uint()}" )
          print( "" )
          exit(1)

      # Message is from a bmark

      elif msg_type == 1:

        if msg_xtra == 0:
          break
        else:
          if opts.trace:
            th.print_line_trace()
          exit( msg_xtra.uint() )

      # Message is from a bmark

      elif msg_type == 2:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          app_fail_xtra = True

      # Message is from print

      elif msg_type == 3:
        app_print = True
        app_print_type = msg_xtra
        if app_print_type not in [0,1,2]:
          if opts.trace:
            th.print_line_trace()
          print("ERROR: received unrecognized app print type!")
          exit(1)

    # Tick the simulator

    th.sim_tick()

  # Force a test failure if we timed out

  if th.sim_cycle_count() >= opts.max_cycles:
    print(f"""
   ERROR: Exceeded maximum number of cycles ({opts.max_cycles}). Your
   application might be in an infinite loop, or you need to use the
   --max-cycles command line option to increase the limit.
    """)
    exit(1)

  # Extra ticks to make VCD easier to read

  if opts.trace:
    th.print_line_trace()
  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Stats

  if opts.stats:
    if num_insts == 0:
      print("""
    ERROR: stats were never enabled in the program. You need to
    use test_stats_on() and test_stats_off()
     """)
    else:
      cpi = float(num_cycles) / float(num_insts)
      print( " num_cycles = {}".format( num_cycles ) )
      print( " num_insts  = {}".format( num_insts ) )
      print( " CPI        = {:1.2f}".format( cpi ) )
      print()

main()

